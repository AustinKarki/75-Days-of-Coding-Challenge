# -*- coding: utf-8 -*-
"""oop practice new.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AfaTTZB-Uv54CLwle_p2qNLXXPKAMiXC
"""

class Cricket:
    def __init__(self, total_over, team_a, team_b, team_a_player, team_b_player, team_a_score, team_b_score):
        self.total_over = total_over
        self.team_a_score = team_a_score
        self.team_b_score = team_b_score
        self.team_a = team_a
        self.team_b = team_b
        self.team_a_player = team_a_player
        self.team_b_player = team_b_player

    def score(self):
        if self.team_a_score > self.team_b_score:
            print(f"{self.team_a} is the winner")
        elif self.team_a_score < self.team_b_score:
            print(f"{self.team_b} is the winner")
        else:
            print("Match draw")


class Prediction:
    def __init__(self, team_a, team_b, team_a_over, team_b_over, team_arun, team_brun):
        self.team_a = team_a
        self.team_b = team_b
        self.team_a_over = team_a_over
        self.team_b_over = team_b_over
        self.team_arun = team_arun
        self.team_brun = team_brun

    def predict(self):
        if (self.team_arun / self.team_a_over) > (self.team_brun / self.team_b_over):
            print(f"{self.team_a} is the predicted winner")
        elif (self.team_arun / self.team_a_over) < (self.team_brun / self.team_b_over):
            print(f"{self.team_b} is the predicted winner")
        else:
            print("Match prediction: Draw")



teama = input("Enter team A name: ")
teamb = input("Enter team B name: ")
lista = []
listb = []

for j in range(1, 12):
    player = input(f"Enter player {j} name of {teama}: ")
    lista.append(player)
for j in range(1, 12):
    player = input(f"Enter player {j} name of {teamb}: ")
    listb.append(player)
score1 = int(input("Enter team A score: "))
score2 = int(input("Enter team B score: "))

w = input("You want Rain prediction or match result: ").lower()
if w == 'rain':
    team_a_over = int(input("Enter team A overs played: "))
    team_b_over = int(input("Enter team B overs played: "))
    team_arun = int(input("Enter team A runs scored: "))
    team_brun = int(input("Enter team B runs scored: "))
    bb = Prediction(teama, teamb, team_a_over, team_b_over, team_arun, team_brun)
    bb.predict()
else:
    aa = Cricket(20, teama, teamb, lista, listb, score1, score2)
    aa.score()

from datetime import datetime
class MentalHealthEntry:
  def __init__(self, daily_mood,activities,hours_of_sleep,date):
    self.daily_mood=daily_mood
    self.activities=activities
    self.hours_of_sleep=hours_of_sleep
    self.date=date


  def __str__(self):
    return f"Daily Mood: {self.daily_mood}, | Activities: {self.activities}, | Hours of Sleep: {self.hours_of_sleep},|  Date: {self.date}"

class MentalHealthTracker:
  def __init__(self):
    self.entries=[]

  def add_entry(self,entry):
    self.entries.append(entry)

  def view_entries(self):
    if not self.entries:
      print("No entries found.")
    else:
      for entry in self.entries:
        print(entry)

  def mood_stats(self,daily_mood):
    print(f"mood of {daily_mood} are:")
    found=False
    for i in self.entries:
      if i.daily_mood==daily_mood:
        print(i)
        found=True
    if not found:
      print("No such mood found.")

  def avg_sleep(self):
    tot=0
    for i in self.entries:
      tot+=i.hours_of_sleep
    return tot/len(self.entries)

  def activity_stats(self,activities):
    if not self.entries:
      print("No entries found.")
    else:
      w=0
      e=0
      r=0
      for i in self.entries:
        if i.activities == "exercise":
          e+=1
        elif i.activities == "working":
          r+=1
        elif i.activities == "sleeping":
          w+=1
      print(f"high:{e} | medium: {r} | low: {w}")

a=datetime.today()
patient=MentalHealthTracker()
patient.add_entry(MentalHealthEntry("Happy","exercise",5,a))
patient.add_entry(MentalHealthEntry("Sad","exercise",7,a))
patient.add_entry(MentalHealthEntry("Happy","exercise",5,a))

patient.view_entries()

patient.mood_stats("Happy")
patient.avg_sleep()
patient.activity_stats("exercise")

class Licence:
  def __init__(self,Product_Name,Licence_Key,Licence_Status,Expiry_Date):
    self.Product_Name=Product_Name
    self.Licence_Key=Licence_Key
    self.Licence_Status=Licence_Status
    self.Expiry_Date=Expiry_Date

  def __str__(self):
    return f"Product Name: {self.Product_Name}, | Licence Key: {self.Licence_Key}, | Licence Status: {self.Licence_Status},|  Expiry Date: {self.Expiry_Date}"

class LicenceManager:
  def __init__(self):
    self.licences=[]

  def add_new_licence(self,licence):
    self.licences.append(licence)

  def view_licence(self):
    for i in self.licences:
      if not self.licences:
        print("No licences found.")
      else:
        print(i)
  def view_status(self,status):
    print(f"Licence of {status}:")
    for i in self.licences:
      if i.Licence_Status==status:
        print(i)
      else:
        print("No such status found.")

  def count_product(self,product_name):
    count=0
    for i in self.licences:
      if i.Product_Name==product_name:
        count+=1
    return count

  def count_overall(self):
    a=0
    b=0
    c=0
    for i in self.licences:
      if i.Licence_Status=="Active":
        a+=1
      elif i.Licence_Status=="Inactive":
        b+=1
      elif i.Licence_Status=="Expired":
        c+=1
    print(f"Active: {a} | Inactive: {b} | Expired: {c}")

  def check_key_expiry(self,key):
    found=False
    for i in self.licences:
      if i.Licence_Key==key:
        if i.Expiry_Date < datetime.today():
          print("Licence Expired.")
        else:
          print("Licence Valid.")
        found=True
    if not found:
      print("No such key found.")


  def expiry_check(self):
    e=datetime.today()
    for i in self.licences:
      if i.Expiry_Date < e:
        print(i)

class product:
  def __init__(self,name,category,price,stock):
    self.name=name
    self.category=category
    self.price=price
    self.stock=stock

  def available(self,quantity):
    if self.stock>=quantity:
      return quantity
    else:
      print(f"Not enough stock {quantity}")
      return 0

  def reduce(self,quantity):
    if self.available(quantity):
      self.stock-=quantity

  def __str__(self):
    return f"Name: {self.name}, | Category: {self.category}, | Price: {self.price},|  Stock: {self.stock}"

class preetyclick:
  def __init__(self):
    self.products=[]

  def add_product(self,product):
    self.products.append(product)

  def view_products(self):
    for i in self.products:
      print(i)

  def search_category(self,category):
    a=False
    for i in self.products:
      if i.category.casefold()==category.casefold():
        print(i)
        a=True
    if not a:
      print("No such category found.")

  def buyproduct(self,name,quantity):
      for i in self.products:
        if i.name.casefold()==name.casefold():
          if self.available(quantity):
            i.reduce(quantity)
            print(f"{quantity} : {i.name}")
            return i.price * quantity
          else:
            print("Not enough stock.")
            return 0
      else:
        print("No such product found.")

def bill(self,purchase):
  print("-------bill---------\n")
  total=0
  for item,quantity in purchase.items():
    total+=self.buyproduct(item,quantity)
  print(f"Total: {total}")