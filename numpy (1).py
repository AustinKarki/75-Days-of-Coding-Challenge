# -*- coding: utf-8 -*-
"""Numpy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_1P-VPuC1cg4F4C6Hfhyp1KNTnJZq24k
"""

# numeric python numpy
# pip install numpy
# list single direction  while array multidirection
# numpy works at multidirection array and also matrix
# store at multidirection array and also matrix

# 1. performance numpy array is faster(generally faster not super fast) than list in numeric computation power as internal representation is properly optimized
# 2.numpy has more functionality than list
# 3.array operation easy to use in proper way as library is more inhance and readable
import numpy as np

"""## Time comparision between numpy array and python lists"""

import time
# ilteration vitra rakhda code la kati choti te step lai generate garxa
ilteration=100000000 #steps
# measure python list generation time
before = time.time()
list(range(ilteration))
after=time.time()
python_time=after-before
print("python time",python_time)

# measure numpy array generation time
import numpy as np
before = time.time()
np.arange(ilteration) # range in list while arange in numpy
after=time.time()
numpy_time=after-before
print("numpy time",numpy_time)

print(f"Numpy is {python_time/numpy_time} faster than regular Python.")
# single target and in numbers

from sklearn.datasets import load_breast_cancer
cancer_data=load_breast_cancer()
cancer_data

cancer_data["data"]

cancer_data["target_names"]

cancer_data["feature_names"]

cancer_data["target"]

cancer_data["data"].shape

cancer_data["data"][0]

cancer_data["data"].info() # no info in numpy

a=np.array([1,2,3,4,5])
type(a) # n dimention array

a.ndim #dimention

b = np.array(
    [[[[[[1, 2, 3, 4], [5, 6, 8, 9], [9, 10, 11, 12]],
    [[1, 9, 3, 4], [5, 7, 8, 9], [9, 10, 11, 12]]],
    [[[1, 2, 3, 4], [5, 6, 8, 9], [9, 10, 11, 12]],
    [[1, 9, 3, 4], [5, 7, 8, 9], [9, 10, 11, 12]]]],
    [[[[1, 2, 3, 4], [5, 6, 8, 9], [9, 10, 11, 12]],
    [[1, 9, 3, 4], [5, 7, 8, 9], [9, 10, 11, 12]]],
    [[[1, 2, 3, 4], [5, 6, 8, 9], [9, 10, 11, 12]],
    [[1, 9, 3, 4], [5, 7, 8, 9999], [9, 10, 11, 12]]]]],
    [[[[[1, 2, 3, 4], [5, 6, 8, 9], [9, 10, 11, 12]],
    [[1, 9, 3, 4], [5, 7, 8, 9], [9, 10, 11, 12]]],
    [[[1, 2, 3, 4], [5, 6, 8, 9], [9, 10, 11, 12]],
    [[1, 9, 3, 4], [5, 7, 8, 9], [9, 10, 11, 12]]]],
    [[[[1, 2, 3, 4], [5, 6, 8, 9], [9, 10, 11, 12]],
    [[1, 9, 3, 4], [5, 7, 8, 9], [9, 10, 11, 12]]],
    [[[1, 2, 3, 4], [5, 6, 8, 9], [9, 10, 11, 12]],
    [[1, 9, 3, 4], [5, 7, 8, 9], [9, 10, 11, 12]]]]]]
)

b[0][1][1][1][1][3]

b.ndim

b.shape

b[0][1][1][1][1][3]

"""
Squid Game Challenge - Game

In a hidden room, contestants discover an array shaped like a multi-dimensional puzzle. They must determine the dimensions of this array: how many layers exist and what is the total shape of this complex structure?

As they search for clues, one contestant must find the exact position of the hidden number five within a larger, grid-like array. Where will this elusive number be located among the surrounding values?

During a tense face-off, competitors learn they can modify a given array by adding ten to any value greater than fifty. They must quickly compute the new values, revealing the transformed array that holds the key to their survival.

The next challenge involves counting. Contestants face an array filled with numbers and must determine just how many times the mysterious number twelve appears among them. Will they find the key to victory hidden in plain sight?

In the final task, contestants must carefully slice through a given array to extract the first two rows from the last embedded section. By navigating the layers, they aim to reveal essential information that could alter the fate of their game."""

e=np.array[]

b = np.array([[[[0, 1], [2, 3]], [[4, 5], [6, 7]]], [[[8, 9], [10, 11]], [[12, 13], [14, 15]]]])
b.shape

b.ndim

b[0][1][0][1]

b[0][1][0][1]

b[1][1][1][1] = (b[1][1][1][1]+10)

b.size

np.where(b==5)

a=np.where(b>=15,b+10,b)
a

b[b==12].size

b

print(b[0][1])

print(b[-1][0])

print(b[0:1,0:1])

b

print(b[0:2,0:1,0:1,1:2])